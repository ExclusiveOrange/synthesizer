' Simple bell-like sound.


halfstep = 2^(1/12);
step = halfstep * halfstep;

a1 = 27.5;
b1 = a1 * step;
c1 = b1 * halfstep;
cf1 = c1 * halfstep;
d1 = c1 * step;
e1 = d1 * step;
f1 = e1 * halfstep;
g1 = f1 * step;
gf1 = g1 * halfstep;



duration = 10 @ 2;
baseAmplitude = 1 @ 0.4;

minOctave = 2;
maxOctave = 5.999999;
octaveDivisor = 1;

tremoloAmplitude = halfstep^(1/24);
tremoloFrequency = 1/413;



' decide bellKey
yesno5 = 0 # (5/4);
yesno5 -= yesno5 % 1;
bellKey = c1 * yesno5;

yesno = 1 - yesno5;
yesno4 = 0 # (yesno * (4/3));
yesno4 -= yesno4 % 1;
bellKey += d1 * yesno4;

yesno -= yesno4;
yesno3 = 0 # (yesno * (3/2));
yesno3 -= yesno3 % 1;
bellKey += e1 * yesno3;

yesno -= yesno3;
yesno2 = 0 # (yesno * 1.999999999);
yesno2 -= yesno2 % 1;
bellKey += g1 * yesno2;

yesno -= yesno2;
bellKey += a1 * yesno;



' decide octave
octave = minOctave # maxOctave;
octave -= octave % octaveDivisor;

' set bell frequency
bellFrequency = bellKey * 2^octave;
' imperfection
bellFrequency = bellFrequency @ (1 / 11);

' set duration
duration *= (440 / bellFrequency)^0.5;
0, duration;

' generate tremolo
sine r3, bellFrequency * tremoloAmplitude - bellFrequency, bellFrequency * tremoloFrequency, 0;
add r3, r3, bellFrequency;

' decrease amplitude for higher frequencies
amplitude = baseAmplitude / bellFrequency^.5;

' generate tone
sine r2, amplitude, r3, 0;


' generate ADSR envelope
ramptime = 1/512;

' new exponential decay instruction
0, duration;
decay r1;

' attack
0, ramptime;
line r4, 0, 1;
mul r1, r1, r4;



' apply ADSR to tone and store to output
0, duration;
mul r0, r1, r2;